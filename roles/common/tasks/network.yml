- name: Create networkmanager interface
  community.general.nmcli:
    conn_name: "{{ item.conn_name }}"
    ifname: "{{ item.ifname }}"
    ip4: "{{ item.ip4 }}"
    gw4: "{{ item.gw4 }}"
    dns4: "{{ item.dns4 }}"
    master: "{{ item.master }}"
    state: "present"
    type: "{{ item.type }}"
  with_items: "{{ ethernet }}"
  when: ethernet is defined

- name: Overlay Module
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  with_items:
    - overlay
    - br_netfilter

- name: Create kube-deps.conf
  ansible.builtin.copy:
    content: "overlay\nbr_netfilter"
    dest: /etc/modules-load.d/kube-deps.conf

- name: IP Forwarding
  ansible.posix.sysctl:
    name: "{{ item }}"
    value: '1'
  with_items:
    - net.ipv4.ip_forward
    - net.bridge.bridge-nf-call-ip6tables
    - net.bridge.bridge-nf-call-iptables

- name: Disable Return Path Filtering
  ansible.posix.sysctl:
    name: "{{ item }}"
    value: '0'
  with_items:
    - net.ipv4.conf.default.rp_filter
    - net.ipv4.conf.all.rp_filter
    - net.ipv4.conf.lo.rp_filter

- name: Enable Firewalld
  ansible.builtin.service:
    name: firewalld
    state: started
    enabled: yes

- name: Common Firewall Ports Enabled
  ansible.posix.firewalld:
    port: "{{ item }}"
    permanent: yes
    immediate: yes
    state: enabled
  with_items: "{{ common_ports }}"

- name: Disable NetworkManager control of DNS
  ansible.builtin.template:
    src: 90-disable-nm-dns.conf.j2
    dest: /etc/NetworkManager/conf.d/90-disable-nm-dns.conf
    owner: root
    group: root
    mode: '0644'
  notify: restart NetworkManager

- name: Enable nameservers
  ansible.builtin.template:
    src: resolv.conf.j2
    dest: /etc/resolv.conf
    owner: root
    group: root
    mode: '0644'
  when: dns is defined and dns.nameservers is defined

- name: Enable hosts file
  ansible.builtin.template:
    src: hosts.j2
    dest: /etc/hosts
    owner: root
    group: root
    mode: '0644'
  when: dns is defined and dns.hosts is defined
